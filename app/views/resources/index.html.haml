%h1
  EOL Repository Layer
%p
  Welcome to the Encyclopedia of Life repository layer. This is where harvested data resources are stored in EOL format, for publication to the front end database, which supports our APIs and other data services, as well as the EOL website.
%p
  Here you can find data resource profile pages
  = ("(" + link_to('example', 'http://content.eol.org/resources/85') + "),").html_safe
  which contain basic information about a resource, and connect to the source of the file (usually an address in our open data repository) and to the corresponding profile in the front end database. While this repository layer is mostly useful for EOL admin, you may find details that interest you here if you are curious about the most recent harvest date, the degree of taxonomic names matching or the data model for a particular dataset.

%h2= t("resources.index.header")
%h3= t("resources.index.jobs_header")
%p
  .ui.label
    %i.inbox.icon
    = t("resources.index.harvest_jobs", count: Delayed::Job.where(queue: 'harvest', locked_at: nil).count)
  .ui.label
    %i.image.icon
    = t("resources.index.media_jobs", count: Delayed::Job.where(queue: 'media', locked_at: nil).count)
  - if policy(Resource).update?
    .ui.label
      - pids = `ps -ef | grep Worker | grep media | grep -v grep | awk '{print $2;}'`.split
      %i.cog.icon
      = t("resources.index.media_pids")
      .uk-text-small
        = pids.join(", ")
    .ui.label
      - pids = `ps -ef | grep Worker | grep harvest | grep -v grep | awk '{print $2;}'`.split
      %i.cog.icon
      = t("resources.index.harvest_pids")
      .uk-text-small
        = pids.join(", ")
    .ui.compact.button
      = link_to(t("resources.actions.kill_workers"), kill_workers_resources_path, data: { confirm: t("are_you_sure") })

- jobs = Delayed::Job.where(queue: 'harvest').limit(10)
%h4= t("resources.index.harvest_jobs_header", count: jobs.size)
- if jobs.any?
  .ui.horizontal.bulleted.list
    - jobs.each do |job|
      - handler = YAML::load(job.handler)
      - type = job.handler.sub(/\n.*$/m, '').sub(/^.*:/, '')
      -# TODO: yes, this doesn't belong here. Controller, maybe?
      - known_types = {'ReDownloadOpendataHarvestJob' => 're-download and reharvest',
        'HarvestJob' => '',
        'ReHarvestJob' => 're-harvest',
        'ResumeHarvestJob' => 'resume harvest' }
      - type = known_types[type] if known_types.key?(type)
      .item
        - if handler.is_a?(Struct) && handler.respond_to?(:resource_id) && (resource = Resource.find(handler.resource_id) rescue nil)
          = link_to(resource.abbr, resource)
        - else
          = t("resources.index.unknown_harvest_job")
        = "(#{type})" unless type.blank?
%h2 Nodes Search
.ui.segment
  = form_tag('nodes/search', method: 'get', class: "ui search") do
    .ui.icon.input
      = text_field_tag(:q, nil, placeholder: 'Search...')
      %i.search.icon
    = submit_tag('Search', class: "ui button")
%h2= t("resources.index.harvest_header")
.ui.segment
  - harv = Harvest.order('updated_at DESC').first
  - if harv.nil?
    .ui.header= t("resources.index.no_harvest")
  - else
    .ui.header= t("resources.index.most_recent_harvest")
    = harv.resource.name
    = render('harvests/show', harv: harv)
  - harvs = Harvest.where(['failed_at > ?', 2.days.ago]).order('updated_at DESC').limit(5)
  .ui.header= t("resources.index.failures", count: harvs.size)
  - unless harvs.empty?
    - harvs.each do |harv|
      = harv.resource.name
      = render('harvests/show', harv: harv)
      %br
%h2= t("resources.index.list_header")
.ui.segment
  %p= paginate(@resources)
  .ui.relaxed.divided.list
    - @resources.each do |resource|
      .item
        %i.large.file.middle.aligned.icon
        .content
          .header= link_to(resource.name, resource)
          - if resource.publish_status
            .description= t("resources.publish_status.#{resource.publish_status}")
  %p= paginate(@resources)
- if user_signed_in?
  .ui.section
    .ui.button= link_to(t("resources.create.action"), new_resource_path)
    - unless params[:all]
      .ui.button= link_to(t("resources.actions.show_all"), resources_path(all: true))
.ui.segment
  %h2= t("resources.index.from_url_header")
  = simple_form_for Resource.new do |f|
    .fields
      = f.input :opendata_url, wrapper_html: { class: 'twelve wide' }
    = f.button :submit
